(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{206:function(e,t,a){"use strict";a.r(t);var r=a(0),i=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),a("p",[e._v("它是Lucene 创始人 DOUG Cutting 创建 源于Nutch 是lucene的子项目 开始")]),e._v(" "),e._m(7),e._v(" "),a("p",[e._v("1.扩容能力 分布式集群 横向扩展\n2.成本低\n3.高效率 并发处理数据 分散存储 分散计算\n4.可靠性 能自动维护数据多份复制 能重新部署 高度的容错性")]),e._v(" "),e._m(8),e._v(" "),a("p",[e._v("搭建2个集群 HDFS集群和YARN集群 二者逻辑上分离 但是物理上是常常在一起")]),e._v(" "),a("p",[e._v("HDFS集群负责海量数据的存储，集群的角色主要有 NameNode , DataNode ,SecondaryNameNode")]),e._v(" "),a("p",[e._v("YARN集群 负责海量数据运算时的资源调度，集群在的角色主要有 ResourceManager,NodeManager")]),e._v(" "),a("p",[e._v("mapreduce 是一个实时计算的框架 是属于代码层面 类似于我们的Spring")]),e._v(" "),e._m(9),e._v(" "),a("p",[e._v("分布式文件系统（解决文件系统的大数据存储） 是Hadoop的核心组件 作为最底层的分布式存储服务而存在的")]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),a("p",[e._v("1.客户端发起请求下载文件 NameNode 检查元数据 然后最后把这些数据返回给客户端（关于返回的备份 返回的是网络拓扑中 ip 距离越近的返回在前面）\n2.请求下载文件 向各个DataNode中下载\n3.客户端把所有的文件下载完毕之后 客户端把各个块合成一个真正的文件")]),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),a("p",[e._v("MapReduce 核心思想是 分而治之\nMap 分 是把复杂的任务分解成为若干个简单的任务 来并行处理，可以进行拆分的前提是这些小任务可以并行计算，彼此间几乎没有依赖关系\nRedece 合即对Map阶段的结果进行全局的汇总")]),e._v(" "),e._m(23),e._v(" "),a("p",[e._v("它是一个分布式运算程序的框架，核心的功能是将用户编写的业务逻辑代码和自带的默认组成一个完整的分布式运算程序 并发运行在Hadoop集群上\n一个完整的mapreduce程序 在分布式运行时 有三类实例进程")]),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),a("p",[e._v("long  LongWritable\nString Text\nInterge Intwritable\nnull NullWritable")]),e._v(" "),e._m(26),e._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/dream_an/article/details/52946840",target:"_blank",rel:"noopener noreferrer"}},[e._v("搭建一"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/Superman404/article/details/83591324",target:"_blank",rel:"noopener noreferrer"}},[e._v("搭建二"),a("OutboundLink")],1)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"什么是hadoop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是hadoop","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是Hadoop")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Hadoop是由java语言编写的，在分布式服务器集群上存储海量数据并运行分布式分析应用的开源框架 "),t("strong",[this._v("允许是呀简单的编程模型再大量计算机集群中对大型的数据进行分布式采集处理")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用场景","aria-hidden":"true"}},[this._v("#")]),this._v(" 适用场景")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("大规模数据")]),this._v(" "),t("li",[this._v("流式数据（写一次 读多次）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"hadoop的架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop的架构","aria-hidden":"true"}},[this._v("#")]),this._v(" Hadoop的架构")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("HDFS:分布式文件存储 解决海量的数据存储")]),this._v(" "),t("li",[this._v("YARN:分布式资源管理 解决资源任务的调度和资源的管理")]),this._v(" "),t("li",[this._v("MapReduce：分布式计算 解决海量的数据计算")]),this._v(" "),t("li",[this._v("Others: 利用YARN的资源管理功能实现其他数据的处理方式")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"hadoop发展历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop发展历史","aria-hidden":"true"}},[this._v("#")]),this._v(" Hadoop发展历史")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点","aria-hidden":"true"}},[this._v("#")]),this._v(" 优缺点")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"hadoop集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop集群","aria-hidden":"true"}},[this._v("#")]),this._v(" Hadoop集群")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"hdfs-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdfs-介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" HDFS 介绍")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"hdfs的重要特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdfs的重要特性","aria-hidden":"true"}},[this._v("#")]),this._v(" HDFS的重要特性")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",[a("li",[e._v("首先它是一个文件系统，用于存储文件，通过统一的命名空间目录树来定位文件")]),e._v(" "),a("li",[e._v("其次它是分布式的，由很多服务器联合起来实现其功能")]),e._v(" "),a("li",[e._v("它是主从模式 Namenode 是主节点 DataNode 是从节点")]),e._v(" "),a("li",[e._v("分块存储 再物理上是分块存储 128M")]),e._v(" "),a("li",[e._v("名字空间 NameNode负责文件系统的名字空间 HDFS会给客户端提供一个统一的抽象的目录树 客户端通过路径来访问文件")]),e._v(" "),a("li",[e._v("一次写入 多次读书 不支持修改 不适用做网盘 因为修改不方便 延迟大")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"namenode-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#namenode-概述","aria-hidden":"true"}},[this._v("#")]),this._v(" NameNode 概述")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",[a("li",[e._v("NameNode是HDFS的核心 是主节点")]),e._v(" "),a("li",[e._v("NameNode 仅仅存储HDFS的元数据：也就是文件系统的所有文件的目录数，并跟踪整个集群中的文件")]),e._v(" "),a("li",[e._v("NameNode 不存储数据或者数据集 数据的本身全部存储在DataNode中")]),e._v(" "),a("li",[e._v("NameNode 知道HDFS中任何给定文件的块位置 和列表")]),e._v(" "),a("li",[e._v("NameNode并不持久化存储每个文件中各个块所在的DataNode的位置信息，这些信息会在系统启动时从数据节点重建 是从节点告诉主节点 来形成一个文件目录")]),e._v(" "),a("li",[e._v("NameNode时HDFS中的单点故障 当它挂掉的时候HDFS无法访问")]),e._v(" "),a("li",[e._v("NameNode所在的机器通常会配置大量的内存")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"datanode-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#datanode-概述","aria-hidden":"true"}},[this._v("#")]),this._v(" DataNode 概述")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",[a("li",[e._v("DataNode 负责将实际数据存储")]),e._v(" "),a("li",[e._v("是从节点 和NameNode 通信")]),e._v(" "),a("li",[e._v("当DataNode 启动的时候 它将自己发布到NameNode")]),e._v(" "),a("li",[e._v("当某个DataNode 关闭的时候 不会影响数据 集群的可用性")]),e._v(" "),a("li",[e._v("DataNode 配置大量的硬盘空间")]),e._v(" "),a("li",[e._v("DataNode 会定期向NameNode定期发送心跳 如果NameNode长时间没有接受到DateNode发送的心跳，NmmeNode就会DataNode失效了,默认3秒")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"hdfs的工作机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdfs的工作机制","aria-hidden":"true"}},[this._v("#")]),this._v(" HDFS的工作机制")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("NameNode负责管理整个文件系统的元数据，DataNode负责管理具体文件的数据块存储 Secondary NameNode 负责元数据的备份 防止单点故障\n\nHDFS的内部工作机制对客户端保持透明，客户端请求访问HDFS都是通过向NameNode申请来进行的\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"hdfs写数据的流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdfs写数据的流程","aria-hidden":"true"}},[this._v("#")]),this._v(" HDFS写数据的流程")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ol",[a("li",[e._v("客户端发起文件上传请求，通过RPC与NameNode建立通讯 NameNode检查目标文件是否存在，父类名是否存在，返回是否可以上传文件")]),e._v(" "),a("li",[e._v("NameNode检查整个文件系统的目录数（看文件是否重复）\n3.返回你是否可以继续上传文件")]),e._v(" "),a("li",[e._v("如果是可以上传的话 继续请求上传的块（它会在请求写的操作之前按照每128M分成一个块）并且带上这次请求的要求备份数")]),e._v(" "),a("li",[e._v("NameNode通过检查DataNode信息池 返回三台可用的DataNode ip   并且返回地址是按照网络拓扑的距离来排序 距离越近排在最前面\n6.客户端 和这些DataNode建立pipline  pipline的建立过程是一个一个的建立 然后一个连一个的返回 最后完成一个流式管道的建立")]),e._v(" "),a("li",[e._v("接下来就算建立数据传输的Stream 以packet为单位 每次发送64k 然后每个DataNode保存源源不断的数据包 并且返回这个数据包是否保存成功 直到这个块的数据全部保存完成\n8 接下来就是第二个快继续上面的步骤 最后直到这个文件全部上传成功 这就是HDFS的上传流程")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"hdfs的读数据的流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdfs的读数据的流程","aria-hidden":"true"}},[this._v("#")]),this._v(" HDFS的读数据的流程")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"mapreduce-计算模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapreduce-计算模型","aria-hidden":"true"}},[this._v("#")]),this._v(" MapReduce 计算模型")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"它的思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#它的思想","aria-hidden":"true"}},[this._v("#")]),this._v(" 它的思想")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"mapreduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapreduce","aria-hidden":"true"}},[this._v("#")]),this._v(" MapReduce")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("MRAppMaster: 负责整个程序的过程调度和状态协调")]),this._v(" "),t("li",[this._v("MapTask 负责map阶段整个数据处理过程")]),this._v(" "),t("li",[this._v("ReduceTask 负责reduce阶段的整个数据处理流程")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"hadoop的数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop的数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" Hadoop的数据类型")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"hadoop-集群搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hadoop-集群搭建","aria-hidden":"true"}},[this._v("#")]),this._v(" Hadoop 集群搭建")])}],!1,null,null,null);t.default=i.exports}}]);