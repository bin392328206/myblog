(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{194:function(t,n,e){"use strict";e.r(n);var s=e(0),a=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"fastjson"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastjson","aria-hidden":"true"}},[t._v("#")]),t._v(" FastJson")]),t._v(" "),e("h3",{attrs:{id:"fastjson的介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastjson的介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" FastJson的介绍")]),t._v(" "),e("blockquote",[e("p",[t._v("JSON协议使用方便，越来越流行,JSON的处理器有很多,这里我介绍一下FastJson,FastJson是阿里的开源框架,被不少企业使用,是一个极其优秀的Json框架")])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"fastjson的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastjson的特点","aria-hidden":"true"}},[t._v("#")]),t._v(" FastJson的特点")]),t._v(" "),e("ul",[e("li",[t._v("FastJson数度快,无论序列化和反序列化,都是当之无愧的fast")]),t._v(" "),e("li",[t._v("功能强大(支持普通JDK类包括任意Java Bean Class、Collection、Map、Date或enum)")]),t._v(" "),e("li",[t._v("零依赖(没有依赖其它任何类库)")])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"fastjson的简单说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastjson的简单说明","aria-hidden":"true"}},[t._v("#")]),t._v(" FastJson的简单说明")]),t._v(" "),e("ul",[e("li",[t._v("FastJson对于json格式字符串的解析主要用到了下面三个类\n"),e("ul",[e("li",[t._v("JSON：fastJson的解析器，用于JSON格式字符串与JSON对象及javaBean之间的转换")]),t._v(" "),e("li",[t._v("JSONObject：fastJson提供的json对象")]),t._v(" "),e("li",[t._v("JSONArray：fastJson提供json数组对象")])])])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"fastjson的用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastjson的用法","aria-hidden":"true"}},[t._v("#")]),t._v(" FastJson的用法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public static void main(String[] args) {\n//\t\ttest1();\n//\t\ttest2();\n//\t\ttest3();\n//\t\ttest4();\n//\t\ttest42();\n\t\ttest5();\n\t}\n\t\n\tprivate static void test5() {\n\t\tPersons persons = new Persons();\n\t\t\n\t\tRoles roles = new Roles();\n\t\troles.setId(1);\n\t\troles.setName("东东");\n\t\tpersons.setAge(5);\n\t\tpersons.setName("小凤");\n\t\tpersons.setRoles(roles);\n\t\t\n\t\troles.setPersons(persons);\n\t\t\n\t\tString data = JSON.toJSONString(persons,SerializerFeature.DisableCircularReferenceDetect);\n\t\tSystem.out.println(data);\n\t}\n\n\tprivate static void test42() {\n\t\tString data = "[{\\"age\\":6,\\"name\\":\\"a\\"},{\\"age\\":6,\\"name\\":\\"a\\"},{\\"age\\":7,\\"name\\":\\"b\\"}]";\n\t\tList<Persons> list = JSON.parseObject(data, new TypeReference<List<Persons>>(){});\n\t\tSystem.out.println(list);\n\t}\n\n\tprivate static void test4() {\n\t\tList<Persons> list = new ArrayList<Persons>();\n\t\tString data = "[{\\"age\\":6,\\"name\\":\\"a\\"},{\\"age\\":6,\\"name\\":\\"a\\"},{\\"age\\":7,\\"name\\":\\"b\\"}]";\n\t\tJSONArray ja = JSON.parseArray(data);\n\t\tfor (Object object : ja) {\n\t\t\tJSONObject jo = (JSONObject) object;\n\t\t\tInteger o1 = (Integer) jo.get("age");\n\t\t\tString o2 = (String) jo.get("name");\n\t\t\tlist.add(new Persons(o2, o1));\n\t\t}\n\t\tSystem.out.println(list);\n\t}\n\n\tpublic static void test3(){\n\t\tList<Persons> list = new ArrayList<Persons>();\n\t\t\n\t\tPersons p1 = new Persons("a",6);\n\t\tPersons p2 = new Persons("b",7);\n\t\t\n\t\tlist.add(p1);\n\t\tlist.add(p1);\n\t\tlist.add(p2);\n\t\t// 解决循环引用\n\t\tString string = JSON.toJSONString(list,SerializerFeature.DisableCircularReferenceDetect);\n\t\t\n\t\tSystem.out.println(string);\n\t\t\n\t}\n\t\n\tprivate static void test2() {\n\t\tString data = "{\\"age\\":5,\\"name\\":\\"晓东\\"}";\n\t\tPersons persons = JSON.parseObject(data,Persons.class);\n\t\tSystem.out.println(persons);\n\t\n\t}\n\t\n\tpublic static void test1(){\n\t\tPersons persons = new Persons("晓东",5);\n\t\tString jsonString = JSON.toJSONString(persons);\n\t\tSystem.out.println(jsonString);\n\t}\n')])])]),e("ul",[e("li",[t._v("Persons")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public class Persons {\n    \tprivate Roles roles;\n    \t\n    \tpublic Persons(Roles roles, String name, int age) {\n    \t\tsuper();\n    \t\tthis.roles = roles;\n    \t\tthis.name = name;\n    \t\tthis.age = age;\n    \t}\n    \tpublic Roles getRoles() {\n    \t\treturn roles;\n    \t}\n    \tpublic void setRoles(Roles roles) {\n    \t\tthis.roles = roles;\n    \t}\n    \tprivate String name;\n    \tprivate int age;\n    \tpublic String getName() {\n    \t\treturn name;\n    \t}\n    \tpublic void setName(String name) {\n    \t\tthis.name = name;\n    \t}\n    \tpublic int getAge() {\n    \t\treturn age;\n    \t}\n    \tpublic void setAge(int age) {\n    \t\tthis.age = age;\n    \t}\n    \t@Override\n    \tpublic String toString() {\n    \t\treturn "Persons [roles=" + roles + ", name=" + name + ", age=" + age + "]";\n    \t}\n    \tpublic Persons() {\n    \t}\n    \tpublic Persons(String name, int age) {\n    \t\tthis.name = name;\n    \t\tthis.age = age;\n    \t}\n    }\n')])])]),e("ul",[e("li",[t._v("Roles")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public class Roles {\n    \t// 停止转换\n    \t@JSONField(serialize=false)\n    \tprivate Persons persons;\n    \tpublic Persons getPersons() {\n    \t\treturn persons;\n    \t}\n    \tpublic void setPersons(Persons persons) {\n    \t\tthis.persons = persons;\n    \t}\n    \tprivate String name;\n    \tprivate int id;\n    \tpublic String getName() {\n    \t\treturn name;\n    \t}\n    \tpublic void setName(String name) {\n    \t\tthis.name = name;\n    \t}\n    \tpublic int getId() {\n    \t\treturn id;\n    \t}\n    \tpublic void setId(int id) {\n    \t\tthis.id = id;\n    \t}\n    \t@Override\n    \tpublic String toString() {\n    \t\treturn "Roles [name=" + name + ", id=" + id +", Persons = " +persons+"]";\n    \t}\n    \tpublic Roles(String name, int id,Persons persons) {\n    \t\tthis.name = name;\n    \t\tthis.id = id;\n    \t\tthis.persons = persons;\n    \t}\n    \tpublic Roles() {\n    \t}\n    }\n')])])]),e("hr"),t._v(" "),e("h2",{attrs:{id:"xml解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xml解析","aria-hidden":"true"}},[t._v("#")]),t._v(" XML解析")]),t._v(" "),e("h3",{attrs:{id:"xml基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xml基础","aria-hidden":"true"}},[t._v("#")]),t._v(" XML基础")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("什么是XML")]),t._v(" "),e("ul",[e("li",[t._v("XML 指可扩展标记语言（EXtensible Markup Language）")]),t._v(" "),e("li",[t._v("XML 是一种标记语言，很类似 HTML")]),t._v(" "),e("li",[t._v("XML 的设计宗旨是传输数据，而非显示数据")]),t._v(" "),e("li",[t._v("XML 标签没有被预定义。您需要自行定义标签。")]),t._v(" "),e("li",[t._v("XML 被设计为具有自我描述性。")]),t._v(" "),e("li",[t._v("XML 是 W3C 的推荐标准")])])]),t._v(" "),e("li",[e("p",[t._v("XML 与 HTML 的主要差异")]),t._v(" "),e("ul",[e("li",[t._v("XML 不是 HTML 的替代。")]),t._v(" "),e("li",[t._v("XML 和 HTML 为不同的目的而设计")]),t._v(" "),e("li",[t._v("XML 被设计为传输和存储数据，其焦点是数据的内容。")]),t._v(" "),e("li",[t._v("HTML 被设计用来显示数据，其焦点是数据的外观")]),t._v(" "),e("li",[t._v("HTML 旨在显示信息，而 XML 旨在传输信息。")])])])]),t._v(" "),e("hr"),t._v(" "),e("ul",[e("li",[t._v("demo.xml")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    \x3c!-- xml 的版本与编码 --\x3e\n    <?xml version ="1.0" encoding="UTF-8" ?>\n    <person>\n    \t<student>\n    \t\t<name>东东</name>\n    \t\t<age>15</age>\n    \t</student>\n    \t\n    \t<dog>\n    \t\t<name>阿花</name>\n    \t\t<color>red</color>\n    \t</dog>\n    \t\n    </person>\n')])])]),e("hr"),t._v(" "),e("ul",[e("li",[t._v("Demo4j解析")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public class Demo4JTest {\n    \tpublic static void main(String[] args) throws Exception {\n    \t\t// 创建XMl对象的读取流\n    \t\tSAXReader reader = new SAXReader();\n    \t\t// 读取文件返回一个文档对象\n    \t\tDocument read = reader.read(Demo4JTest.class.getResourceAsStream("/demo.xml"));\n    \t\t// 获取根节点\n    \t\tElement eroot = read.getRootElement();//person\n    \t\t// 获取根节点下面所有的子标签\n    \t\tList<Element> elements = eroot.elements();// student 、Dog\n    \t\t\n    \t\t/*for (Element element : elements) {\n    \t\t\tif(element.getName().equals("student")){\n    \t\t\t\tElement ename = element.element("name");\n    \t\t\t\tSystem.out.println(ename.getText());\n    \t\t\t\tElement eage = element.element("age");\n    \t\t\t\tSystem.out.println(eage.getText());\n    \t\t\t}\n    \t\t}*/\n    \t\tfor (Element element : elements) {\n    \t\t\tList<Element> elements2 = element.elements();\n    \t\t\tfor (Element element2 : elements2) {\n    \t\t\t\tSystem.out.println(element2.getName()+":"+element2.getText());\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n')])])]),e("ul",[e("li",[t._v("Demo4J写入")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public static void test1() throws Exception{\n\t\t//用文档助手新建一个元素\n\t\tElement root = DocumentHelper.createElement("Persons");\n\t\troot.addElement("weight").addText("350");\n\t\t//创建文档\n\t\tDocument document =  DocumentHelper.createDocument(root);\n\t\t//添加属性\n\t\troot.addAttribute("count","2");\n\t\t//父元素生成一个子元素\n\t\tElement e1 = root.addElement("Person");\n\t\t//给子元素添加属性\n\t\te1.addAttribute("id","1");\n\t\t//给子元素添加孙子元素\n\t\te1.addElement("person-name").addText("小茗同学");\n\t\te1.addElement("person-age").addText("18");\n\t\t\n\t\t//设置文件编码\n\t\tOutputFormat of = new OutputFormat();\n\t\tof.setEncoding("UTF-8");\n\t\t//设置换行\n\t\tof.setNewlines(true);\n\t\t//设置缩进\n\t\tof.setIndent(true);\n\t\t//使用四个空格缩进,可以兼容文本比编辑器\n\t\tof.setIndent("    ");\n\t\t//创建文件方法\n\t\tXMLWriter xw = new XMLWriter(new FileWriter("E:/work/TestFile/a.xml"),of);\n\t\t//把内容写入指定的文件文件\n\t\txw.write(document);\n\t\t//关闭\n\t\txw.close();\n\t}\n')])])]),e("hr"),t._v(" "),e("h3",{attrs:{id:"sax解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sax解析","aria-hidden":"true"}},[t._v("#")]),t._v(" SAX解析")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    解析步骤：\n 1.创建一个SAXParserFactory对象\n    SAXParserFactory factory=SAXParserFactory.newInstance();\n\n 2.获得解析器    \n    SAXParser parser=factory.newSAXParser();\n\n 3.调用解析方法解析xml，这里的第一个参数可以传递文件、流、字符串、需要注意第二个参数（new DefaultHander）\n    File file=new File("girls.xml");\n    parser.parse(file,new DefaultHandler());\n    /**注解：---\x3e这里的DefaultHandler表示\n    DefaultHandler类是SAX2事件处理程序的默认基类。它继承了EntityResolver、DTDHandler、\n    ContentHandler和ErrorHandler这四个接口。包含这四个接口的所有方法，所以我们在编写事件处理程序时，\n    可以不用直接实现这四个接口，而继承该类，然后重写我们需要的方法，所以在这之前我们先定义一个用于实现解析\n    方法如下：*/\n\n 4.创建一个MyHandler类来继承DefaultHandler并重写方法\n    //定一个名为MyHandler类用来继承DefaultHandler\n    (1)MyHandler extends DefaultHander\n    (2)重写方法，快速记住方法（2个开始，2个结束，1一个文字(charactor--里面的内容)）\n    (3)2个开始：StartDocment（文档的开始）StartElement(元素的开始) 2个结束:endElement(元素的结束)\n     endDocment(文档的结束，标志着xml文件的结束) 1个文字内容：charactor(文字内容)\n\n 5.创建一个集合把所解析的内容添加到集合\n    //分析：目的我们只是需要把xml里面的文字内容添加到我们的集合而不需要其他元素，所以我们需要进行判断得到\n    //(接上)我们需要的内容(下面会赋一个图帮助理解)\n\n 6.接步骤三 输出集合System.out.pritnln(list); 解析完成!\n')])])]),e("ul",[e("li",[t._v("Person 老规矩")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public class Person implements Serializable{\n    \t/**\n    \t * \n    \t */\n    \tprivate static final long serialVersionUID = 1L;\n    \tprivate String name;\n    \tprivate String age;\n    \tpublic String getName() {\n    \t\treturn name;\n    \t}\n    \tpublic void setName(String name) {\n    \t\tthis.name = name;\n    \t}\n    \tpublic String getAge() {\n    \t\treturn age;\n    \t}\n    \tpublic void setAge(String age) {\n    \t\tthis.age = age;\n    \t}\n    \tpublic Person(String name, String age) {\n    \t\tthis.name = name;\n    \t\tthis.age = age;\n    \t}\n    \tpublic Person() {\n    \t}\n    \t@Override\n    \tpublic String toString() {\n    \t\treturn "Person [name=" + name + ", age=" + age + "]";\n    \t}\n    }\n')])])]),e("ul",[e("li",[t._v("第二步继承DefaultHandler")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public class MyHandler extends DefaultHandler{\n\n    \t// 准备添加XMl数据集合\n    \tprivate List<Person> list;\n    \t// 调用对象\n    \tprivate Person person;\n    \t// 标记开始标签\n    \tprivate String tag;\n    \tpublic List<Person> getList() {\n    \t\treturn list;\n    \t}\n    \tpublic void setList(List<Person> list) {\n    \t\tthis.list = list;\n    \t}\n    \tpublic Person getPerson() {\n    \t\treturn person;\n    \t}\n    \tpublic void setPerson(Person person) {\n    \t\tthis.person = person;\n    \t}\n    \tpublic String getTag() {\n    \t\treturn tag;\n    \t}\n    \tpublic void setTag(String tag) {\n    \t\tthis.tag = tag;\n    \t}\n    \t@Override\n    \tpublic void startDocument() throws SAXException {\n    \t\tSystem.out.println(1);\n    \t\t// 初始化集合\n    \t\tlist = new ArrayList<Person>();\n    \t}\n    \t@Override\n    \tpublic void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n    \t\tSystem.out.println(2);\n    \t\t// qName标签名\n    \t\ttag = qName;\n    \t\t// 如果标签名等于person时初始化Person对象\n    \t\tif(tag.equals("person")){\n    \t\t\tperson = new Person();\n    \t\t}\n    \t}\n    \t@Override\n    \tpublic void endElement(String uri, String localName, String qName) throws SAXException {\n    \t\tSystem.out.println(3);\n    \t\t// 这句话，必须写，因为，当sax解析完一个元素的时候，会自动认为换行符是一个字符，会继续执行 character 方法 。如果不写，就会造成没有数据的现象。 \n            tag="";\n            \n            if(qName.equals("person")){\n            \tlist.add(person);\n            }\n    \t\t\n    \t}\n    \t@Override\n    \tpublic void characters(char[] ch, int start, int length) throws SAXException {\n    \t\tSystem.out.println(4);\n    //      这里是内容，但是，无法直接判断属于哪一个元素。\n            String string = new String(ch, start, length);\n            if ("name".equals(tag)) {//判断当前内容，属于哪一个元素。\n                person.setName(string);\n            }else if ("age".equals(tag)) {\n                person.setAge(string);\n            }//这两种情况，表示 当前语句执行在 girls 标签内。\n    \t}\n    }\n')])])]),e("ul",[e("li",[t._v("测试类")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public static void main(String[] args) {\n\t\t\n\t\t//1.创建对象\n        SAXParserFactory newInstance = SAXParserFactory.newInstance();\n        try {\n//      2.获取解析器 \n            SAXParser saxParser = newInstance.newSAXParser();\n//      3.调用方法开始解析xml   \n//            File file = new File("student.xml");\n            MyHandler dh = new MyHandler();\n            saxParser.parse(TestSAX.class.getResourceAsStream("/students.xml"), dh);\n            List<Person> list =dh.getList();\n//      4.输出集合\n            System.out.println(list);\n        } catch (Exception e) {\n        } \n\t}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    <?xml version ="1.0" encoding="UTF-8" ?>\n    <persons>\n    \t<person>\n    \t\t<name>东东</name>\n    \t\t<age>15</age>\n    \t</person>\n    \t<person>\n    \t\t<name>小凤</name>\n    \t\t<age>15</age>\n    \t</person>\n    </persons>\n')])])])])}],!1,null,null,null);n.default=a.exports}}]);