(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{193:function(t,a,s){"use strict";s.r(a);var c=s(0),i=Object(c.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"jstat相关命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jstat相关命令","aria-hidden":"true"}},[t._v("#")]),t._v(" jstat相关命令")]),t._v(" "),s("h2",{attrs:{id:"jstat-gcutil-pid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jstat-gcutil-pid","aria-hidden":"true"}},[t._v("#")]),t._v(" jstat -gcutil pid")]),t._v(" "),s("p",[t._v("通过 jstat -gcutil pid 命令，我们可以对gc信息进行统计。\n[root@xttblog ~]# jstat -gcutil 5801\n  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT\n  0.00  97.37   5.54  53.37  69.83     21    0.366     1    0.480    0.846")]),t._v(" "),s("h2",{attrs:{id:"jstat-gc-pid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jstat-gc-pid","aria-hidden":"true"}},[t._v("#")]),t._v(" jstat -gc pid")]),t._v(" "),s("p",[t._v("这个命令看起来显示的信息比上一个命令还多。jstat -gc pid 可以显示gc的信息，查看gc的次数，及时间。其中最后五项，\n分别是young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间。\n[root@xttblog ~]# jstat -gc 5801\nS0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT\n15360.0 12288.0  0.0   11964.6 298496.0 16530.5   67072.0    35793.4   83968.0 58633.2     21    0.366   1      0.480    0.846")]),t._v(" "),s("h2",{attrs:{id:"jstat-gccapacity-pid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jstat-gccapacity-pid","aria-hidden":"true"}},[t._v("#")]),t._v(" jstat -gccapacity pid")]),t._v(" "),s("p",[t._v("jstat -gccapacity pid 命令可以显示：VM内存中三代（young,old,perm）对象的使用和占用大小。如：PGCMN显示的是最小perm的内存使用量，PGCMX显示的是perm的内存最大使用量，\nPGC是当前新生成的perm内存占用量，PC是但前perm内存占用量。其他的可以根据这个类推， OC是old内纯的占用量。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.xttblog.com/?p=3175",alt:"参考博客"}})])])}],!1,null,null,null);a.default=i.exports}}]);