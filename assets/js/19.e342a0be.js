(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{210:function(t,e,r){"use strict";r.r(e);var n=r(0),i=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("h3",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[t._v("#")])]),t._v(" "),r("blockquote",[r("p",[t._v("转换流")])]),t._v(" "),r("blockquote",[r("p",[t._v("缓冲流")])]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"转换流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转换流","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换流")]),t._v(" "),r("blockquote",[r("p",[t._v("在学习字符流(FileReader、FileWriter)的时候，其中说如果需要指定编码和缓冲区大小时，可以在字节流的基础上，构造一个InputStreamReader或者OutputStreamWriter，这又是什么意思呢？")])]),t._v(" "),r("h3",{attrs:{id:"outputstreamwriter类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#outputstreamwriter类","aria-hidden":"true"}},[t._v("#")]),t._v(" OutputStreamWriter类")]),t._v(" "),r("blockquote",[r("p",[t._v("查阅OutputStreamWriter的API介绍，OutputStreamWriter 是字符流通向字节流的桥梁：可使用指定的字符编码表，将要写入流中的字符编码成字节。它的作用的就是，将字符串按照指定的编码表转成字节，在使用字节流将这些字节写出去")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/87ba1090c0378b579325bb2656d1cbb6/xmlnote/D819A472B9EB43C18613B5A5108C2000/32301",alt:"image"}})]),t._v(" "),r("ul",[r("li",[t._v("代码演示")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    public static void writeC() throws Exception {\n\t\t//创建与文件关联的字节输出流对象\n\t\tFileOutputStream fos = new FileOutputStream("c:\\\\c.txt");\n\t\t//创建可以把字符转成字节的转换流对象，并指定编码\n\t\tOutputStreamWriter osw = new OutputStreamWriter(fos,"utf-8");\n\t\t//调用转换流，把文字写出去，其实是写到转换流的缓冲区中\n\t\tosw.write("你好");//写入缓冲区。\n\t\tosw.close();\n\t}\n\n')])])]),r("blockquote",[r("p",[t._v("OutputStreamWriter流对象，它到底如何把字符转成字节输出的呢")])]),t._v(" "),r("blockquote",[r("p",[t._v("其实在OutputStreamWriter流中维护自己的缓冲区，当我们调用OutputStreamWriter对象的write方法时，会拿着字符到指定的码表中进行查询，把查到的字符编码值转成字节数存放到OutputStreamWriter缓冲区中。然后再调用刷新功能，或者关闭流，或者缓冲区存满后会把缓冲区中的字节数据使用字节流写到指定的文件中")])]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"inputstreamreader类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#inputstreamreader类","aria-hidden":"true"}},[t._v("#")]),t._v(" InputStreamReader类")]),t._v(" "),r("blockquote",[r("p",[t._v("查阅InputStreamReader的API介绍，InputStreamReader 是字节流通向字符流的桥梁：它使用指定的字符编码表读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/87ba1090c0378b579325bb2656d1cbb6/xmlnote/8E9F54F8324348EDA2E769C948BB6046/32303",alt:"image"}})]),t._v(" "),r("ul",[r("li",[t._v("代码演示")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    public class InputStreamReaderDemo {\n    \tpublic static void main(String[] args) throws IOException {\n    \t\t//演示字节转字符流的转换流\n    \t\treadCN();\n    \t}\n    \tpublic static void readC() throws IOException{\n    \t\t//创建读取文件的字节流对象\n    \t\tInputStream in = new FileInputStream("c:\\\\c.txt");\n    \t\t//创建转换流对象 \n    \t\t//InputStreamReader isr = new InputStreamReader(in);这样创建对象，会用本地默认码表读取，将会发生错误解码的错误\n            InputStreamReader isr = new InputStreamReader(in,"utf-8");\n    \t\t//使用转换流去读字节流中的字节\n    \t\tint ch = 0;\n    \t\twhile((ch = isr.read())!=-1){\n    \t\t\tSystem.out.println((char)ch);\n    \t\t}\n    \t\t//关闭流\n    \t\tisr.close();\n    \t}\n    }\n\n')])])]),r("p",[r("strong",[t._v("注意：在读取指定的编码的文件时，一定要指定编码格式，否则就会发生解码错误，而发生乱码现象")])]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"转换流和子类区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转换流和子类区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换流和子类区别")]),t._v(" "),r("blockquote",[r("p",[t._v("如下继承关系")])]),t._v(" "),r("ul",[r("li",[t._v("OutputStreamWriter\n"),r("ul",[r("li",[t._v("|- FileWriter")])])]),t._v(" "),r("li",[t._v("InputStreamReader\n"),r("ul",[r("li",[t._v("|- FileReader")])])])]),t._v(" "),r("blockquote",[r("p",[t._v("父类与子类的功能有什么区别呢?")])]),t._v(" "),r("blockquote",[r("p",[t._v("OutputStreamWriter和InputStreamReader是字符和字节的桥梁：也可以称之为字符转换流。字符转换流原理：字节流+编码表")])]),t._v(" "),r("blockquote",[r("p",[t._v("FileWriter和FileReader：作为子类，仅作为操作字符文件的便捷类存在。当操作的字符文件，使用的是默认编码表时可以不用父类，而直接用子类就完成操作了，简化了代码")])]),t._v(" "),r("blockquote",[r("p",[t._v('InputStreamReader isr = new InputStreamReader(new FileInputStream("a.txt"));//默认字符集')])]),t._v(" "),r("blockquote",[r("p",[t._v('InputStreamReader isr = new InputStreamReader(new FileInputStream("a.txt"),"GBK");//指定GBK字符集')])]),t._v(" "),r("blockquote",[r("p",[t._v('FileReader fr = new FileReader("a.txt");')])]),t._v(" "),r("blockquote",[r("p",[t._v("这三句代码的功能是一样的，其中第三句最为便捷")])]),t._v(" "),r("p",[r("strong",[t._v("注意：一旦要指定其他编码时，绝对不能用子类，必须使用字符转换流。什么时候用子类呢？")])]),t._v(" "),r("ul",[r("li",[t._v("条件:\n"),r("ul",[r("li",[t._v("1.操作的是文件")]),t._v(" "),r("li",[t._v("2.使用默认编码")])])]),t._v(" "),r("li",[t._v("总结:\n"),r("ul",[r("li",[t._v("字节 → 字符 : 看不懂的 -> 看的懂的。需要读,输入流 InputStreamReader")]),t._v(" "),r("li",[t._v("字符 → 字节 : 看不懂的 →> 看不懂的。需要写,输入流 OutputStreamWriter")])])])]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"缓冲流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓冲流","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓冲流")]),t._v(" "),r("blockquote",[r("p",[t._v("在我们学习字节流与字符流的时候，大家都进行过读取文件中数据的操作，读取数据量大的文件时，读取的速度会很慢，很影响我们程序的效率，那么，我想提高速度，怎么办？")])]),t._v(" "),r("blockquote",[r("p",[t._v("Java中提高了一套缓冲流，它的存在，可提高IO流的读写速度")])]),t._v(" "),r("blockquote",[r("p",[t._v("缓冲流，根据流的分类分类字节缓冲流与字符缓冲流")])]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"字节缓冲流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字节缓冲流","aria-hidden":"true"}},[t._v("#")]),t._v(" 字节缓冲流")]),t._v(" "),r("p",[t._v("字节缓冲流根据流的方向，共有2个")]),t._v(" "),r("ul",[r("li",[t._v("写入数据到流中，字节缓冲输出流 BufferedOutputStream")]),t._v(" "),r("li",[t._v("读取流中的数据，字节缓冲输入流 BufferedInputStream")])]),t._v(" "),r("blockquote",[r("p",[t._v("它们的内部都包含了一个缓冲区，通过缓冲区读写，就可以提高了IO流的读写速度")])]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"字节缓冲输入流-bufferedoutputstream"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字节缓冲输入流-bufferedoutputstream","aria-hidden":"true"}},[t._v("#")]),t._v(" 字节缓冲输入流 BufferedOutputStream")]),t._v(" "),r("blockquote",[r("p",[t._v("通过字节缓冲流，进行文件的读写操作 写数据到文件的操作")])]),t._v(" "),r("ul",[r("li",[t._v("构造方法\n"),r("ul",[r("li",[t._v("public BufferedOutputStream(OutputStream out)创建一个新的缓冲输出流，以将数据写入指定的底层输出流")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    public class BufferedOutputStreamDemo01 {\n    \tpublic static void main(String[] args) throws IOException {\n    \t\t\n    \t\t//写数据到文件的方法\n    \t\twrite();\n    \t}\n    \n    \t/*\n    \t * 写数据到文件的方法\n    \t * 1,创建流\n    \t * 2，写数据\n    \t * 3，关闭流\n    \t */\n    \tprivate static void write() throws IOException {\n    \t\t//创建基本的字节输出流\n    \t\tFileOutputStream fileOut = new FileOutputStream("abc.txt");\n    \t\t//使用高效的流，把基本的流进行封装，实现速度的提升\n    \t\tBufferedOutputStream out = new BufferedOutputStream(fileOut);\n    \t\t//2，写数据\n    \t\tout.write("hello".getBytes());\n    \t\t//3，关闭流\n    \t\tout.close();\n    \t}\n    }\n\n')])])])])]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"字节缓冲输入流bufferedinputstream"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字节缓冲输入流bufferedinputstream","aria-hidden":"true"}},[t._v("#")]),t._v(" 字节缓冲输入流BufferedInputStream")]),t._v(" "),r("blockquote",[r("p",[t._v("刚刚我们学习了输出流实现了向文件中写数据的操作，那么，现在我们完成读取文件中数据的操作")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("构造方法")]),t._v(" "),r("ul",[r("li",[t._v("public BufferedInputStream(InputStream in)")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    /*\n\t * 从文件中读取数据\n\t * 1,创建缓冲流对象\n\t * 2，读数据，打印\n\t * 3，关闭\n\t */\n\tprivate static void read() throws IOException {\n\t\t//1,创建缓冲流对象\n\t\tFileInputStream fileIn = new FileInputStream("abc.txt");\n\t\t//把基本的流包装成高效的流\n\t\tBufferedInputStream in = new BufferedInputStream(fileIn);\n\t\t//2，读数据\n\t\tint ch = -1;\n\t\twhile ( (ch = in.read()) != -1 ) {\n\t\t\t//打印\n\t\t\tSystem.out.print((char)ch);\n\t\t}\n\t\t//3，关闭\n\t\tin.close();\n\t}\n\n')])])]),r("hr")])]),t._v(" "),r("h3",{attrs:{id:"使用基本的流与高效的流完成复制文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用基本的流与高效的流完成复制文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用基本的流与高效的流完成复制文件")]),t._v(" "),r("blockquote",[r("p",[t._v("我们一直在说，高效的流速度快并高效，怎么体现呢？需要通过一个复制文件耗时的比较过程，来体验一下高效流带来的快感")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    /*\n     * 需求：将d:\\\\test.avi文件进行复制\n     * \t\t采用4种方式复制\n     * \t\t方式1： 采用基本的流，一次一个字节的方式复制\t共耗时 224613毫秒\n     * \t\t方式2： 采用基本的流，一个多个字节的方式赋值\t共耗时     327毫秒\n     * \t\t方式3： 采用高效的流，一次一个字节的方式复制\t共耗时    2047毫秒\n     * \t\t方式4： 采用高效的流，一个多个字节的方式赋值\t共耗时      96毫秒\n     * \n     * 数据源： d:\\\\test.avi\n     * 目的地1: d:\\\\copy1.avi\n     * 目的地2: d:\\\\copy2.avi\n     * 目的地3: d:\\\\copy3.avi\n     * 目的地4: d:\\\\copy4.avi\n     * \n     * 实现的步骤：\n     * \t1，指定数据源\n     * \t2，指定目的地\n     * \t3，读数据\n     * \t4，写数据\n     * \t5，关闭流\n     * \n     */\n    public class CopyAVI {\n    \tpublic static void main(String[] args) throws IOException {\n    \t\t//开始计时\n    \t\tlong start = System.currentTimeMillis();\n    \t\t//方式1： 采用基本的流，一次一个字节的方式复制\n    \t\t//method1("d:\\\\test.avi", "d:\\\\copy1.avi");\n    \t\t//方式2： 采用基本的流，一个多个字节的方式赋值\n    \t\t//method2("d:\\\\test.avi", "d:\\\\copy2.avi");\n    \t\t//方式3： 采用高效的流，一次一个字节的方式复制\n    \t\t//method3("d:\\\\test.avi", "d:\\\\copy3.avi");\n    \t\t//方式4： 采用高效的流，一个多个字节的方式赋值\n    \t\tmethod4("d:\\\\test.avi", "d:\\\\copy4.avi");\n    \t\t\n    \t\t//结束计时\n    \t\tlong end = System.currentTimeMillis();\n    \t\t//打印耗时多少毫秒\n    \t\tSystem.out.println("共耗时 " +(end - start)+ "毫秒");\n    \t}\n    \t\n    \t//方式4： 采用高效的流，一个多个字节的方式赋值\n    \tprivate static void method4(String src, String dest) throws IOException {\n    \t\t//1，指定数据源\n    \t\tBufferedInputStream in = new BufferedInputStream(new FileInputStream(src));\n    \t\t //2，指定目的地\n    \t\tBufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n    \t\t //3，读数据\n    \t\tbyte[] buffer = new byte[1024];\n    \t\tint len = -1;\n    \t\twhile ( (len = in.read(buffer)) != -1) {\n    \t\t\t//4,写数据\n    \t\t\tout.write(buffer, 0, len);\n    \t\t}\n    \t\t //5，关闭流\n    \t\tin.close();\n    \t\tout.close();\n    \t}\n    \n    \t//方式3： 采用高效的流，一次一个字节的方式复制\n    \tprivate static void method3(String src, String dest) throws IOException {\n    \t\t//1，指定数据源\n    \t\tBufferedInputStream in = new BufferedInputStream(new FileInputStream(src));\n    \t\t //2，指定目的地\n    \t\tBufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n    \t\t //3，读数据\n    \t\tint ch = -1;\n    \t\twhile ((ch=in.read()) != -1) {\n    \t\t\t//4，写数据\n    \t\t\tout.write(ch);\t\n    \t\t}\t\t\n    \t\t //5，关闭流\n    \t\tin.close();\n    \t\tout.close();\n    \t}\n    \n    \t//方式2： 采用基本的流，一个多个字节的方式赋值\n    \tprivate static void method2(String src, String dest) throws IOException {\n    \t\t//1，指定数据源\n    \t\tFileInputStream in = new FileInputStream(src);\n    \t\t//2，指定目的地\n    \t\tFileOutputStream out = new FileOutputStream(dest);\n    \t\t//3，读数据\n    \t\tbyte[] buffer = new byte[1024];\n    \t\tint len = -1;\n    \t\twhile ( (len=in.read(buffer)) != -1) {\n    \t\t\t//4，写数据\n    \t\t\tout.write(buffer, 0, len);\n    \t\t}\n    \t\t//5，关闭流\n    \t\tin.close();\n    \t\tout.close();\n    \t}\n    \n    \t//方式1： 采用基本的流，一次一个字节的方式复制\n    \tprivate static void method1(String src, String dest) throws IOException {\n    \t\t//1，指定数据源\n    \t\tFileInputStream in = new FileInputStream(src);\n    \t\t//2，指定目的地\n    \t\tFileOutputStream out = new FileOutputStream(dest);\n    \t\t//3，读数据\n    \t\tint ch = -1;\n    \t\twhile (( ch=in.read()) != -1) {\n    \t\t\t//4，写数据\n    \t\t\tout.write(ch);\n    \t\t}\n    \t\t//5，关闭流\n    \t\tin.close();\n    \t\tout.close();\n    \t}\n    }\n\n')])])]),r("hr"),t._v(" "),r("h3",{attrs:{id:"字符缓冲流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符缓冲流","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符缓冲流")]),t._v(" "),r("ul",[r("li",[t._v("字符缓冲输入流 BufferedReader")]),t._v(" "),r("li",[t._v("字符缓冲输出流 BufferedWriter")])]),t._v(" "),r("blockquote",[r("p",[t._v("完成文本数据的高效的写入与读取的操作")])]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"字符缓冲输出流bufferedwriter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符缓冲输出流bufferedwriter","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符缓冲输出流BufferedWriter")]),t._v(" "),r("blockquote",[r("p",[t._v("将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入")])]),t._v(" "),r("ul",[r("li",[t._v("方法:\nvoid newLine( ) 根据当前的系统，写入一个换行符")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    /*\n     * BufferedWriter 字符缓冲输出流\n     * 方法\n     * \tpublic void newLine()写入一个行分隔符\n     * \n     * 需求： 通过缓冲输出流写入数据到文件\n     * 分析：\n     * \t1，创建流对象\n     * \t2，写数据\n     * \t3，关闭流\n     * \n     */\n    public class BufferedWriterDemo {\n    \tpublic static void main(String[] args) throws IOException {\n    \t\t//创建流\n    \t\t//基本字符输出流\n    \t\tFileWriter fileOut = new FileWriter("file.txt");\n    \t\t//把基本的流进行包装\n    \t\tBufferedWriter out = new BufferedWriter(fileOut);\n    \t\t//2，写数据\n    \t\tfor (int i=0; i<5; i++) {\n    \t\t\tout.write("hello");\n    \t\t\tout.newLine();\n    \t\t}\n    \t\t//3,关闭流\n    \t\tout.close();\n    \t}\n    }\n\n')])])]),r("hr"),t._v(" "),r("h3",{attrs:{id:"字符缓冲输入流bufferedreader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符缓冲输入流bufferedreader","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符缓冲输入流BufferedReader")]),t._v(" "),r("blockquote",[r("p",[t._v("从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取")])]),t._v(" "),r("ul",[r("li",[t._v("方法\n"),r("ul",[r("li",[t._v("public String readLine() 读取一个文本行，包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null")])])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    /*\n     * BufferedReader 字符缓冲输入流\n     * \n     * 方法：\n     * \tString readLine() \n     * 需求：从文件中读取数据，并显示数据\n     */\n    public class BufferedReaderDemo {\n    \tpublic static void main(String[] args) throws IOException {\n    \t\t//1,创建流\n    \t\tBufferedReader in = new BufferedReader(new FileReader("file.txt"));\n    \t\t//2，读数据\n    \t\t//一次一个字符\n    \t\t//一次一个字符数组\n    \t\t//一次读取文本中一行的字符串内容\n    \t\tString line = null;\n    \t\twhile( (line = in.readLine()) != null ){\n    \t\t\tSystem.out.println(line);\n    \t\t}\n    \t\t\n    \t\t//3,关闭流\n    \t\tin.close();\n    \t}\n    }\n\n')])])]),r("hr"),t._v(" "),r("h3",{attrs:{id:"使用字符缓冲流完成文件的复制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用字符缓冲流完成文件的复制","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用字符缓冲流完成文件的复制")]),t._v(" "),r("blockquote",[r("p",[t._v("刚刚我们学习完了缓冲流，现在我们就使用字符缓冲流的特有功能，完成文本文件的复制")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('    /*\n     * 采用高效的字符缓冲流，完成文本文件的赋值\n     * \n     * 数据源： file.txt\n     * 目的地： copyFile.txt\n     * \n     * 分析：\n     * \t1，指定数据源， 是数据源中读数据，采用输入流\n     * \t2,指定目的地，是把数据写入目的地，采用输出流\n     * \t3,读数据\n     * \t4，写数据\n     * \t5，关闭流\n     */\n    public class CopyTextFile {\n    \tpublic static void main(String[] args) throws IOException {\n    \t\t//1，指定数据源， 是数据源中读数据，采用输入流\n    \t\tBufferedReader in = new BufferedReader(new FileReader("file.txt"));\n    \t\t//2,指定目的地，是把数据写入目的地，采用输出流\n    \t\tBufferedWriter out = new BufferedWriter(new FileWriter("copyFile.txt"));\n    \t\t//3,读数据\n    \t\tString line = null;\n    \t\twhile ( (line = in.readLine()) != null ) {\n    \t\t\t//4，写数据\n    \t\t\tout.write(line);\n    \t\t\t//写入换行符号\n    \t\t\tout.newLine();\n    \t\t}\n    \t\t//5，关闭流\n    \t\tout.close();\n    \t\tin.close();\n    \t}\n    }\n\n')])])]),r("hr"),t._v(" "),r("h2",{attrs:{id:"流的操作规律"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流的操作规律","aria-hidden":"true"}},[t._v("#")]),t._v(" 流的操作规律")]),t._v(" "),r("blockquote",[r("p",[t._v("IO流中对象很多，解决问题(处理设备上的数据时)到底该用哪个对象呢？")])]),t._v(" "),r("blockquote",[r("p",[t._v("把IO流进行了规律的总结(四个明确)")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("明确一: 要操作的数据是数据源还是数据目的")]),t._v(" "),r("ul",[r("li",[t._v("源 ： InputStreamReader")]),t._v(" "),r("li",[t._v("目的 : OutputStreamWriter")]),t._v(" "),r("li",[t._v("先根据需求明确要读还是要写")])])]),t._v(" "),r("li",[r("p",[t._v("明确二: 要造作的数据是字节还是文本")]),t._v(" "),r("ul",[r("li",[t._v("源\n"),r("ul",[r("li",[t._v("字节 : InputStream")]),t._v(" "),r("li",[t._v("文本 : Reader")])])]),t._v(" "),r("li",[t._v("目的\n"),r("ul",[r("li",[t._v("字节 : OutputStream")]),t._v(" "),r("li",[t._v("文本 : Writer")]),t._v(" "),r("li",[t._v("已经明确到了具体的体系上")])])])])]),t._v(" "),r("li",[r("p",[t._v("明确三: 明确数据所在的具体设备")]),t._v(" "),r("ul",[r("li",[t._v("源设备:\n"),r("ul",[r("li",[t._v("硬盘: 文件 File开头")]),t._v(" "),r("li",[t._v("内存: 数组、字符串")]),t._v(" "),r("li",[t._v("键盘: System.in")]),t._v(" "),r("li",[t._v("网络: Socket")])])]),t._v(" "),r("li",[t._v("目的设备\n"),r("ul",[r("li",[t._v("硬盘 : 文件 File开头")]),t._v(" "),r("li",[t._v("内存 ：数组，字符串")]),t._v(" "),r("li",[t._v("屏幕 : System.out")]),t._v(" "),r("li",[t._v("网络 ：Socket")]),t._v(" "),r("li",[t._v("完全可以明确具体要使用哪个流对象")])])])])]),t._v(" "),r("li",[r("p",[t._v("明确四: 是否需要额外功能呢?")]),t._v(" "),r("ul",[r("li",[t._v("转换吗? 转换流. InputStreamReader OutputStreamWriter")]),t._v(" "),r("li",[t._v("高效吗? 缓冲区对象。Buffered...")])])]),t._v(" "),r("li",[r("p",[t._v("InputStream")]),t._v(" "),r("ul",[r("li",[t._v("FileInputStream")]),t._v(" "),r("li",[t._v("BufferedInputStream")])])]),t._v(" "),r("li",[r("p",[t._v("OutputStream")]),t._v(" "),r("ul",[r("li",[t._v("FileOutputStream")]),t._v(" "),r("li",[t._v("BufferedOutputStream")])])]),t._v(" "),r("li",[r("p",[t._v("Writer")]),t._v(" "),r("ul",[r("li",[t._v("OutputStreamWriter")]),t._v(" "),r("li",[t._v("FileWriter\n"),r("ul",[r("li",[t._v("BufferedWriter")])])])])]),t._v(" "),r("li",[r("p",[t._v("Reader")]),t._v(" "),r("ul",[r("li",[t._v("InputStreamReader")]),t._v(" "),r("li",[t._v("FileReader\n"),r("ul",[r("li",[t._v("BufferedReader")])])])])])]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("字节流")]),t._v(" "),r("ul",[r("li",[t._v("字节输入流 InputStream\n"),r("ul",[r("li",[t._v("FileInputStream 操作文件的字节输入流")]),t._v(" "),r("li",[t._v("BufferedInputStream高效的字节输入流")])])])])]),t._v(" "),r("li",[r("p",[t._v("字节输出流 OutputStream")]),t._v(" "),r("ul",[r("li",[t._v("FileOutputStream 操作文件的字节输出流")]),t._v(" "),r("li",[t._v("BufferedOutputStream 高效的字节输出流")])])]),t._v(" "),r("li",[r("p",[t._v("字符流")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("字符输入流 Reader")]),t._v(" "),r("ul",[r("li",[t._v("FileReader 操作文件的字符输入流")]),t._v(" "),r("li",[t._v("BufferedReader 高效的字符输入流")]),t._v(" "),r("li",[t._v("InputStreamReader 输入操作的转换流(把字节流封装成字符流)")])])]),t._v(" "),r("li",[r("p",[t._v("字符输出流 Writer")]),t._v(" "),r("ul",[r("li",[t._v("FileWriter 操作文件的字符输出流")]),t._v(" "),r("li",[t._v("ufferedWriter 高效的字符输出流")]),t._v(" "),r("li",[t._v("OutputStreamWriter 输出操作的转换流(把字节流封装成字符流)")])])])])]),t._v(" "),r("li",[r("p",[t._v("方法：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("读数据方法：")]),t._v(" "),r("ul",[r("li",[t._v("read() 一次读一个字节或字符的方法")]),t._v(" "),r("li",[t._v("read(byte[]  char[]) 一次读一个数组数据的方法")]),t._v(" "),r("li",[t._v("readLine() 一次读一行字符串的方法(BufferedReader类特有方法)")]),t._v(" "),r("li",[t._v("readObject() 从流中读取对象(ObjectInputStream特有方法)")])])]),t._v(" "),r("li",[r("p",[t._v("写数据方法：")]),t._v(" "),r("ul",[r("li",[t._v("write(int) 一次写一个字节或字符到文件中")]),t._v(" "),r("li",[t._v("write(byte[] char[]) 一次写一个数组数据到文件中")]),t._v(" "),r("li",[t._v("write(String) 一次写一个字符串内容到文件中")]),t._v(" "),r("li",[t._v("writeObject(Object ) 写对象到流中(ObjectOutputStream类特有方法)")]),t._v(" "),r("li",[t._v("newLine() 写一个换行符号(BufferedWriter类特有方法)")])])])])]),t._v(" "),r("li",[r("p",[t._v("向文件中写入数据的过程")]),t._v(" "),r("ul",[r("li",[t._v("1，创建输出流对象")]),t._v(" "),r("li",[t._v("2，写数据到文件")]),t._v(" "),r("li",[t._v("3，关闭输出流")])])]),t._v(" "),r("li",[r("p",[t._v("从文件中读数据的过程")]),t._v(" "),r("ul",[r("li",[t._v("1，创建输入流对象")]),t._v(" "),r("li",[t._v("2，从文件中读数据")]),t._v(" "),r("li",[t._v("3，关闭输入流")])])]),t._v(" "),r("li",[r("p",[t._v("文件复制的过程")]),t._v(" "),r("ul",[r("li",[t._v("1，创建输入流（数据源）")]),t._v(" "),r("li",[t._v("2，创建输出流（目的地）")]),t._v(" "),r("li",[t._v("3，从输入流中读数据")]),t._v(" "),r("li",[t._v("4，通过输出流，把数据写入目的地")]),t._v(" "),r("li",[t._v("5，关闭流")])])])])])}],!1,null,null,null);e.default=i.exports}}]);