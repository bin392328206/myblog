(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{178:function(t,e,s){"use strict";s.r(e);var r=s(0),a=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.docker.elastic.co/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方的镜像地址"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.elastic.co/cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://hub.docker.com/r/sebp/elk/",target:"_blank",rel:"noopener noreferrer"}},[t._v("elk集成镜像"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5ba4c8ef6fb9a05d082a1f53",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装文档elk集成方式"),s("OutboundLink")],1)])]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("1.0 创建 索引 类似于 mysql 创建数据\n2.0文档 存入索引库的原始数据 比如一个商品的 全部信息就是一个文档\n3.0 字段 就是 文档里面具体的属性 和mysql\n4.0映射配置 用来定义文档中的属性是否被存储 是否索引 字段的类型等")]),t._v(" "),s("p",[t._v("es一些主要的字段的属性的 类型")]),t._v(" "),s("p",[t._v("1.type的分类\n类似于 String 的 分为2种\ntext:可分词，不可以参与聚合\nkeyword: 不可分词 数据会作为完整的字段进行匹配 可以参与聚合")]),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("2.index\n他可以影响字段是否被索引  true 可以被索引  就是可以用来被搜索  false相反  index的 默认值是true 所以我们需要将不需要被搜索的字段变成false")]),t._v(" "),s("p",[t._v("3.store\n是否将数据进行额外存储。\n在学习lucene和solr时，我们知道如果一个字段的store设置为false，那么在文档列表中就不会有这个字段的值，用户\n的搜索结果中不会显示出来。\n但是在Elasticsearch中，即便store设置为false，也可以搜索到结果。\n原因是Elasticsearch在创建文档索引时，会将文档中的原始数据备份，保存到一个叫做_source的属性中。而且我\n们可以通过过滤_source来选择哪些要显示，哪些不显示。\n而如果设置store为true，就会在_source以外额外存储一份数据，多余，因此一般我们都会将store设置为false，事\n实上，store的默认值就是false。")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),s("p",[t._v("3.2.结果过滤\n默认情况下，elasticsearch在搜索的结果中，会把文档中保存在_source的所有字段都返回。\n如果我们只想获取其中的部分字段，我们可以添加_source的过滤\nincludes：来指定想要显示的字段excludes：来指定不想要显示的字")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),s("p",[t._v("sort 可以让我们按照不同的字段进行排序，并且通过order指定排序的方式")]),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫桶，一个叫度量：   桶的概念 就是就我理解 就是 用来分组 的 他只管分组   度量 就是 计算 分完组了 当时要计算 然后把结果展示\n综上所述，我们发现bucket aggregations 一种聚合：metrics aggregations即度量\n桶内度量")]),t._v(" "),s("p",[t._v("桶内嵌套套桶")]),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("将你的文档分区到不同的容器或者分片(shards)中，它们可以存在于一个或多个节点中。\n将分片均匀的分配到各个节点，对索引和搜索做负载均衡。\n冗余每一个分片，防止硬件故障造成的数据丢失。\n将集群中任意一个节点上的请求路由到相应数据所在的节点。\n无论是增加节点，还是移除节点，分片都可以做到无缝的扩展和迁移。")]),t._v(" "),s("p",[t._v("Elasticsearch用于构建高可用和可扩展的系统。扩展的方式可以是购买更好的服务器(纵向扩展(vertical scale or scaling up))或者购买更多的服务器（横向扩展(horizontal scale or scaling out)）。\nes的主从复制 数据同步 崩溃恢复")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),s("p",[t._v("为了理解为什么深度分页是有问题的，让我们假设在一个有5个主分片的索引中搜索。当我们请求结果的第一页（结果1到10）时，每个分片产生自己最顶端10个结果然后返回它们给请求节点(requesting node)，它再排序这所有的50个结果以选出顶端的10个结果。\n现在假设我们请求第1000页——结果10001到10010。工作方式都相同，不同的是每个分片都必须产生顶端的10010个结果。然后请求节点排序这50050个结果并丢弃50040个！\n你可以看到在分布式系统中，排序结果的花费随着分页的深入而成倍增长。这也是为什么网络搜索引擎中任何语句不能返回多于1000个结果的原因。")]),t._v(" "),s("p",[t._v("es的查询方式 分为2种 一种是 查询字符串  另外一种是请求体 叫做结构化查询语句(DSL)")]),t._v(" "),t._m(24),t._v(" "),s("p",[t._v("而对于全文数据的查询来说，却有些微妙。我们不会去询问这篇文档是否匹配查询要求？。 但是，我们会询问这篇文档和查询的匹配程度如何？。换句话说，对于查询条件，这篇文档的相关性有多高？")]),t._v(" "),t._m(25),t._v(" "),s("p",[t._v("我们把es的文档 把他们分词 然后把每个词都索引 当检索关键字的时候 就可以查询到他们的相关性 也就是说通过这种方式 加上相似度算法")]),t._v(" "),t._m(26),t._v(" "),s("p",[t._v("一个分析器需要包括三个功能")]),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),s("p",[t._v("默认情况下，结果集会按照相关性进行排序 -- 相关性越高，排名越靠前。 这一章我们会讲述相关性是什么以及它是如何计算的。 在此之前，我们先看一下sort参数的使用方法。")]),t._v(" "),t._m(29),t._v(" "),s("p",[t._v("查询语句会为每个文档添加一个 _score 字段。评分的计算方式取决于不同的查询类型 -- 不同的查询语句用于不同的目的：fuzzy 查询会计算与关键词的拼写相似程度，terms查询会计算 找到的内容与关键词组成部分匹配的百分比，但是一般意义上我们说的全文本搜索是指计算内容与关键词的类似程度。\nElasticSearch的相似度算法被定义为 TF/IDF，即检索词频率/反向文档频率，包括一下内容：")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),s("p",[t._v("由于不知道哪个文档会匹配查询（文档可能存放在集群中的任意分片上），所以搜索需要一个更复杂的模型。一个搜索不得不通过查询每一个我们感兴趣的索引的分片副本，来看是否含有任何匹配的文档。\n但是，找到所有匹配的文档只完成了这件事的一半。在搜索（search）API返回一页结果前，来自多个分片的结果必须被组合放到一个有序列表中。因此，搜索的执行过程分两个阶段，称为查询然后取回（query then fetch）。\n分布式搜索查询阶段")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),s("p",[t._v("些查询字符串（query-string）可选参数能够影响搜索过程。 preference（偏爱）")]),t._v(" "),s("p",[t._v("结果震荡（Bouncing Results）\n想像一下，你正在按照timestamp字段来对你的结果排序，并且有两个document有相同的timestamp。由于搜索请求是在所有有效的分片副本间轮询的，这两个document可能在原始分片里是一种顺序，在副本分片里是另一种顺序。\n这就是被称为结果震荡（bouncing results）的问题：用户每次刷新页面，结果顺序会发生变化。避免这个问题方法是对于同一个用户总是使用同一个分片。方法就是使用一个随机字符串例如用户的会话ID（session ID）来设置preference参数。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"elastic技术栈-学习-包括-elk-和efk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elastic技术栈-学习-包括-elk-和efk","aria-hidden":"true"}},[this._v("#")]),this._v(" elastic技术栈 学习 包括 ELK  和EFk")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"部署注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署注意事项","aria-hidden":"true"}},[this._v("#")]),this._v(" 部署注意事项")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("必须不能使用 root  账户去部署它 这是它的一种保护机制")]),this._v(" "),e("li",[this._v("在/etc/sysctl.conf 里面加入 vm.max_map_count=262144 然后重启")]),this._v(" "),e("li",[this._v("采坑就是如果你在宿主机挂载了 数据卷 你就要给他权限 不然它没法启动 原因是会导致容器的数据不能加载")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"下面是是几篇学习文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下面是是几篇学习文档","aria-hidden":"true"}},[this._v("#")]),this._v(" 下面是是几篇学习文档")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"docker-compose-es-和kbana"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-es-和kbana","aria-hidden":"true"}},[this._v("#")]),this._v(" docker-compose Es 和Kbana")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('version: \'2\'\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.5.4\n    environment:\n      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"\n    volumes:\n      - ./elasticsearch/data:/usr/share/elasticsearch/data\n    hostname: elasticsearch\n    restart: always\n    ports:\n      - "9200:9200"\n      - "9300:9300"\n  kibana:\n    image: docker.elastic.co/kibana/kibana:6.5.4\n    environment:\n      - ELASTICSEARCH_URL=http://elasticsearch:9200 #elasticsearch查询接口地址\n    hostname: kibana\n    depends_on:\n      - elasticsearch  #后于elasticsearch启动\n    restart: always\n    ports:\n      - "5601:5601"\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"elasticsearch是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch是什么","aria-hidden":"true"}},[this._v("#")]),this._v(" Elasticsearch是什么:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("分布式的Restful实时搜索和分析引擎")]),this._v(" "),e("li",[this._v("分布式的实时文件存储,每个字段都被索引并可被搜索")]),this._v(" "),e("li",[this._v("高扩展性,可扩展至上百台服务器,处理PB级结构化或非结构化数据")]),this._v(" "),e("li",[this._v("Elasticsearch用于全文检索,结构化搜索,分析/合并使用")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"elasticsearch的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch的特性","aria-hidden":"true"}},[this._v("#")]),this._v(" Elasticsearch的特性:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Elasticsearch没有典型意义的事务(无事务性)")]),this._v(" "),e("li",[this._v("Elasticsearch是一种面向文档的数据库")]),this._v(" "),e("li",[this._v("Elasticsearch没有提供授权和认证特性")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"es-的基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es-的基本用法","aria-hidden":"true"}},[this._v("#")]),this._v(" es 的基本用法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Numerical 分2类\n基本数据类型: long interger shortn byte doublle float half_float\n浮点数高精度类型 ：scaled_float"),e("br"),this._v("\nDate 类\nelasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long，节省空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基本查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本查询","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本查询")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v('GET /索引库名/_search\n{ "query":\n{ "查询类型":\n{ "查询条件":"查询条件值" }\n}\n}'),e("br"),this._v('\n这里的query代表一个查询对象，里面可以有不同的查询属性查询类型：例如：match_all， match，term ， range 等等查询条件：\n查询条件会根据类型的不同，写法也有差异，后面详细讲解\n{\n"took" : 1,\n"timed_out" : false,\n"_shards" : {\n"total" : 1,\n"successful" : 1,\n"skipped" : 0,\n"failed" : 0\n},\n"hits" : {\n"total" : 2,\n"max_score" : 1.0,\n"hits" : [\n{\n"_index" : "tecode",\n"_type" : "goods",\n"_id" : "5BVnzGsBCun8lUkrnfMz",\n"_score" : 1.0,\n"_source" : {\n"title" : "小王手机",\n"images" : "www.wangbin.ship:8080",\n"price" : "123"\n}\n},\n{\n"_index" : "tecode",\n"_type" : "goods",\n"_id" : "3",\n"_score" : 1.0,\n"_source" : {\n"title" : "超迷手机",\n"images" : "http//images",\n"price" : "122",\n"stock" : "22",\n}\n}\n]\n}\n}\ntook：查询花费时间，单位是毫秒time_out：是否超时_shards：分片信息hits：搜索结果总览对象total：搜索到的总条数max_score：所有结果中文档得分的hits：搜索结果的文档对象数组，每_index：索引库_type：文档类型_id：文档id_score：文档得分_source：文档的源数据')])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"查询的几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询的几种方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 查询的几种方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("match_all  查询所有\nmatch 匹配查询\nmulti_match 多字段查询\nterm 词条匹配 精确查询\nterms 多词条 精确查询 匹配\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"高级查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级查询","aria-hidden":"true"}},[this._v("#")]),this._v(" 高级查询")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("布尔组合（bool)\nbool把各种其它查询通过must（与）、must_not（非）、should（或）的方式进行组合")]),this._v(" "),e("li",[this._v("范围查询(range)\n有以下范围 gt 大于  gte大于等于  lt小于 lte小于等于")]),this._v(" "),e("li",[this._v('模糊查询(fuzzy)\nfuzzy 查询是 term 查询的模糊等价。它允许用户搜索词条与实际词条的拼写出现偏差，但是偏差的编辑距离不得\n超过2： GET /heima/_search { "query": { "fuzzy": { "title": "appla" } } } 这种类似')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 排序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"聚合aggregations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚合aggregations","aria-hidden":"true"}},[this._v("#")]),this._v(" 聚合aggregations")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"elasticsearch致力于隐藏分布式系统的复杂性。以下这些操作都是在底层自动完成的-天生的分布式集群-："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch致力于隐藏分布式系统的复杂性。以下这些操作都是在底层自动完成的-天生的分布式集群-：","aria-hidden":"true"}},[this._v("#")]),this._v(" Elasticsearch致力于隐藏分布式系统的复杂性。以下这些操作都是在底层自动完成的 (天生的分布式集群)：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"es的分片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es的分片","aria-hidden":"true"}},[this._v("#")]),this._v(" es的分片")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("其实在es中 索引只是一个用来指向 一个或者多个分片 一个分片就是一个最小级别的工作单元 他只保存了索引中所有数据的一部分 分片就是一个lucene实例")]),t._v(" "),s("li",[t._v("分片是Elasticsearch在集群中分发数据的关键。把分片想象成数据的容器。文档存储在分片中，然后分片分配到你集群中的节点上。当你的集群扩容或缩小，Elasticsearch将会自动在你的节点间迁移分片，以使集群保持平衡\n类似于 平衡2茶树")]),t._v(" "),s("li",[t._v("主分片 是可以用来做数据的操作的 当一个索引的所有主分片处于 gree状态 那么此时就可以提供服务了 复制分片 是用来分配到各个子节点")]),t._v(" "),s("li",[t._v("启动第二个节点 只要第二个节点与第一个节点有相同的cluster.name（请看./config/elasticsearch.yml文件），它就能自动发现并加入第一个节点所在的集群。如果没有，检查日志找出哪里出了问题。这可能是网络广播被禁用，或者防火墙阻止了节点通信。")]),t._v(" "),s("li",[t._v("对于搜索 如果请求发到了 主分片 那么主分片 会把请求 轮寻的发送给其他节点的复制分片 然后通过通过复制分片找到文档返回给主节点 主节点返回给请求对象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"在集群系统中深度分页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在集群系统中深度分页","aria-hidden":"true"}},[this._v("#")]),this._v(" 在集群系统中深度分页")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"es的数据类型我认为可以分为2类-确却值-和-全文文本-（非结构化数据）、"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es的数据类型我认为可以分为2类-确却值-和-全文文本-（非结构化数据）、","aria-hidden":"true"}},[this._v("#")]),this._v(" es的数据类型我认为可以分为2类  确却值 和 全文文本 （非结构化数据）、")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"es的倒排索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es的倒排索引","aria-hidden":"true"}},[this._v("#")]),this._v(" es的倒排索引")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"es的分析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es的分析器","aria-hidden":"true"}},[this._v("#")]),this._v(" es的分析器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("字符过滤器")]),this._v(" "),e("li",[this._v("分词器")]),this._v(" "),e("li",[this._v("标记过滤")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"相关性排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关性排序","aria-hidden":"true"}},[this._v("#")]),this._v(" 相关性排序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"相关性简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关性简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 相关性简介")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("检索词频率::检索词在该字段出现的频率？出现频率越高，相关性也越高。 字段中出现过5次要比只出现过1次的相关性高")]),t._v(" "),s("li",[t._v("反向文档频率::每个检索词在索引中出现的频率？频率越高，相关性越低。 检索词出现在多数文档中会比出现在少数文档中的权重更低， 即检验一个检索词在文档中的普遍重要性。")]),t._v(" "),s("li",[t._v("字段长度准则::字段的长度是多少？长度越长，相关性越低。 检索词出现在一个短的 title 要比同样的词出现在一个长的 content 字段。")]),t._v(" "),s("li",[t._v("我们可以在开发环境用explain参数来调试 当前查询为何会得到以下相关性数据")]),t._v(" "),s("li",[t._v("重要： ElasticSearch将所有字段数据加载到内存中并不是匹配到的那部分数据。 而是索引下所有文档中的值，包括所有类型。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"es分布式搜索的执行方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es分布式搜索的执行方式","aria-hidden":"true"}},[this._v("#")]),this._v(" es分布式搜索的执行方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("第一步是向索引里的每个节点的分片副本广播请求。就像document的GET请求一样，搜索请求可以被每个分片的原本或任意副本处理。这就是更多的副本（当结合更多的硬件时）如何提高搜索的吞吐量的方法。对于后续请求，协调节点会轮询所有的分片副本以分摊负载。")]),this._v(" "),e("li",[this._v("每一个分片在本地执行查询和建立一个长度为from+size的有序优先队列——这个长度意味着它自己的结果数量就足够满足全局的请求要求。分片返回一个轻量级的结果列表给协调节点。只包含documentID值和排序需要用到的值，例如_score。")]),this._v(" "),e("li",[this._v("整个过程类似于归并排序算法，先分组排序再归并到一起，对于这种分布式场景非常适用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"搜索选项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搜索选项","aria-hidden":"true"}},[this._v("#")]),this._v(" 搜索选项")])}],!1,null,null,null);e.default=a.exports}}]);